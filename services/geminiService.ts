
import { GoogleGenAI, GenerateContentResponse } from "@google/genai";
import { GEMINI_MODEL_TEXT } from '../constants';

const API_KEY = process.env.API_KEY;

if (!API_KEY) {
  console.warn("Gemini API key not found. Please set the API_KEY environment variable.");
}
const ai = new GoogleGenAI({ apiKey: API_KEY || "MISSING_API_KEY" });

export const generateFollowUpMessage = async (clientName: string, serviceName: string = "corte de cabelo infantil"): Promise<string> => {
  if (!API_KEY) {
    return Promise.resolve(`Ol√° ${clientName}! üòä J√° est√° na hora do pr√≥ximo ${serviceName} do seu pequeno(a)? Adorar√≠amos rev√™-los! Agende um hor√°rio conosco. ‚ú®`);
  }
  try {
    const prompt = `Crie uma mensagem curta, amig√°vel e encantadora para WhatsApp, destinada a ${clientName}. O objetivo √© lembr√°-lo(a) que j√° faz um tempo desde o √∫ltimo ${serviceName} de seu filho(a) e convid√°-lo(a) a agendar um novo hor√°rio. Use emojis infantis e um tom divertido. N√£o inclua links ou chamadas para clicar em bot√µes, apenas o texto da mensagem. Seja breve, no m√°ximo 3 frases.`;

    const response: GenerateContentResponse = await ai.models.generateContent({
      model: GEMINI_MODEL_TEXT,
      contents: prompt,
       config: {
        // Omitting thinkingConfig to use default (enabled for higher quality)
        temperature: 0.7, // Creative but not too random
      }
    });

    const text = response.text.trim();
    return text || `Ol√° ${clientName}! üòä Hora de renovar o visual do seu pequeno(a)! Que tal agendar o pr√≥ximo ${serviceName}? Estamos te esperando! ‚úÇÔ∏èüß∏`;

  } catch (error) {
    console.error("Error generating follow-up message with Gemini:", error);
    // Fallback message
    return `Ol√° ${clientName}! üòä J√° est√° na hora do pr√≥ximo ${serviceName} do seu pequeno(a)? Adorar√≠amos rev√™-los! Agende um hor√°rio conosco. ‚ú®`;
  }
};

export const generateGeneralQueryResponse = async (query: string): Promise<{text: string, groundingChunks?: any[]}> => {
  if (!API_KEY) {
    return Promise.resolve({text: "Desculpe, o servi√ßo de IA n√£o est√° dispon√≠vel no momento."});
  }
  try {
    const response = await ai.models.generateContent({
      model: GEMINI_MODEL_TEXT,
      contents: query,
      config: {
        tools: [{googleSearch: {}}], // Enable Google Search grounding
      },
    });

    return {
        text: response.text,
        groundingChunks: response.candidates?.[0]?.groundingMetadata?.groundingChunks
    };

  } catch (error) {
    console.error("Error with general Gemini query:", error);
    return {text: "Ocorreu um erro ao processar sua pergunta. Tente novamente."};
  }
};
